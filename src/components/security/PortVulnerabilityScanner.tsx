
import React, { useState, useEffect, useCallback } from 'react';
import { Scan, Shield, ShieldAlert } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { toast } from 'sonner';
import { getPortRiskLevel, getCommonPortService, getSeverityColor } from './utils';

interface PortScanResult {
  port: number;
  status: 'open' | 'closed' | 'filtered';
  service: string;
  risk: 'high' | 'medium' | 'low';
  description: string;
}

const PortVulnerabilityScanner: React.FC = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [openPorts, setOpenPorts] = useState<PortScanResult[]>([]);
  const [lastScan, setLastScan] = useState<string | null>(null);
  const [expandedPort, setExpandedPort] = useState<number | null>(null);

  const commonPortsToScan = [
    21, 22, 23, 25, 53, 80, 110, 135, 139, 143, 
    161, 443, 445, 1433, 1434, 3306, 3389, 5432, 8080
  ];

  const mockScanPort = async (port: number): Promise<'open' | 'closed' | 'filtered'> => {
    // This is a mock implementation for frontend demo purposes
    // In a real implementation, this would call a backend service
    return new Promise((resolve) => {
      setTimeout(() => {
        // Randomly determine if a port is open (for demonstration)
        const randomValue = Math.random();
        if (randomValue < 0.15) {
          // 15% chance of port being open
          resolve('open');
        } else if (randomValue < 0.30) {
          // 15% chance of port being filtered
          resolve('filtered');
        } else {
          // 70% chance of port being closed
          resolve('closed');
        }
      }, 100 + Math.random() * 200); // Simulate network latency
    });
  };

  const scanPorts = useCallback(async () => {
    setIsScanning(true);
    setProgress(0);
    setOpenPorts([]);
    toast.info('Starting port vulnerability scan...');

    const scanResults: PortScanResult[] = [];
    let completedScans = 0;

    for (const port of commonPortsToScan) {
      const status = await mockScanPort(port);
      completedScans++;
      setProgress((completedScans / commonPortsToScan.length) * 100);

      if (status === 'open') {
        const service = getCommonPortService(port);
        const { risk, description } = getPortRiskLevel(port);
        
        scanResults.push({
          port,
          status,
          service,
          risk,
          description
        });

        if (risk === 'high') {
          toast.error(`High risk port ${port} (${service}) is open!`);
        } else if (risk === 'medium') {
          toast.warning(`Medium risk port ${port} (${service}) is open`);
        }
      }
    }

    setOpenPorts(scanResults);
    setLastScan(new Date().toLocaleString());
    setIsScanning(false);

    if (scanResults.length === 0) {
      toast.success('Port scan complete. No vulnerable open ports found.');
    } else {
      toast.error(`Found ${scanResults.length} potentially vulnerable open ports!`);
    }
  }, [commonPortsToScan]);

  // Run an initial scan when component mounts
  useEffect(() => {
    const initialScan = async () => {
      // Wait a moment before starting the initial scan
      await new Promise(resolve => setTimeout(resolve, 1000));
      scanPorts();
    };
    
    initialScan();
    
    // Set up interval for continuous scanning (every 5 minutes)
    const intervalId = setInterval(() => {
      scanPorts();
    }, 300000); // 5 minutes
    
    return () => clearInterval(intervalId);
  }, [scanPorts]);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Scan className="text-purple-500" size={20} />
          <h3 className="text-lg font-semibold">Port Vulnerability Test</h3>
        </div>
        {lastScan && (
          <span className="text-sm text-gray-500">Last scan: {lastScan}</span>
        )}
      </div>

      {isScanning && (
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-sm">Scanning ports...</span>
            <span className="text-sm text-muted-foreground">{Math.round(progress)}%</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>
      )}

      <div className="space-y-2">
        {openPorts.length === 0 && lastScan ? (
          <Alert className="bg-green-50 border-green-200">
            <Shield className="h-5 w-5 text-green-500" />
            <AlertTitle>No vulnerable ports detected</AlertTitle>
            <AlertDescription>
              No commonly targeted ports were found open on your network.
            </AlertDescription>
          </Alert>
        ) : openPorts.length > 0 ? (
          <>
            <Alert variant="destructive">
              <ShieldAlert className="h-5 w-5" />
              <AlertTitle>Open ports detected!</AlertTitle>
              <AlertDescription>
                {openPorts.length} potentially vulnerable {openPorts.length === 1 ? 'port was' : 'ports were'} found open on your network.
              </AlertDescription>
            </Alert>
            
            <div className="space-y-2 mt-3">
              {openPorts.map((port) => (
                <Collapsible 
                  key={port.port}
                  open={expandedPort === port.port}
                  onOpenChange={() => setExpandedPort(expandedPort === port.port ? null : port.port)}
                  className={`border rounded-md ${getSeverityColor(port.risk)}`}
                >
                  <div className="p-3">
                    <CollapsibleTrigger className="flex w-full items-center justify-between">
                      <div className="flex items-center">
                        <Badge variant={port.risk === 'high' ? 'destructive' : port.risk === 'medium' ? 'default' : 'secondary'}>
                          Port {port.port}
                        </Badge>
                        <span className="ml-2">{port.service}</span>
                      </div>
                      <Badge variant={port.risk === 'high' ? 'destructive' : port.risk === 'medium' ? 'default' : 'secondary'}>
                        {port.risk} risk
                      </Badge>
                    </CollapsibleTrigger>
                  </div>
                  <CollapsibleContent>
                    <div className="px-3 pb-3">
                      <p className="text-sm mt-1">{port.description}</p>
                      <div className="mt-2 text-sm">
                        <strong>Recommendation:</strong> {port.risk === 'high' 
                          ? 'Close this port immediately if not essential for your network.'
                          : port.risk === 'medium'
                            ? 'Secure this service with strong authentication and consider firewall rules.'
                            : 'Monitor this port for unusual activity.'}
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              ))}
            </div>
          </>
        ) : null}
      </div>

      <Button 
        onClick={scanPorts} 
        disabled={isScanning}
        variant="outline"
        className="w-full"
      >
        <Scan size={16} className="mr-2" />
        {isScanning ? 'Scanning...' : 'Run Port Scan Now'}
      </Button>
    </div>
  );
};

export default PortVulnerabilityScanner;
